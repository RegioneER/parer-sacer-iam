<?xml version="1.0" encoding="UTF-8"?>
<project name="SacerIAM-dist" default="dist-all-env" basedir=".">

    <target name="init-params">
        <property name="target.dir" value="./target"/>
        <property name="ears.dir" value="./ears"/>
        <property name="ear.path" value="./SacerIam-ear/${target.dir}"/>
        <property name="filters.path" value="./src/main/filters"/>
        <property name="config.path" value="./src/main/config"/>
        <property name="project.prefix" value="saceriam-jboss"/>
    </target>

    <target name="clean" depends="init-params">
        <delete dir="${target.dir}"/>
    </target>
    <target name="clean-ear" depends="init-params">
        <delete dir="${ears.dir}"/>
    </target>

    <target name="clean-all" depends="clean-ear,clean" />

    <target name="ear-filename">
        <path id="ear_filename_path">
            <fileset dir="${target.dir}">
                <include name="saceriam-*.ear" />
            </fileset>
        </path>
        <property name="ear.filename" refid="ear_filename_path"/>
    </target>

    <target name="deps-filename">
        <path id="war_filename_path">
            <fileset dir="${target.dir}">
                <include name="${project.prefix}-web-*.war" />
            </fileset>
        </path>
        <path id="jpa_filename_path">
            <fileset dir="${target.dir}/lib">
                <include name="${project.prefix}-jpa-*.jar" />
            </fileset>
        </path>
        <property name="war.filename" refid="war_filename_path"/>
        <property name="jpa.filename" refid="jpa_filename_path"/>
    </target>

    <target name="copy_ear" depends="init-params,clean-all">
        <mkdir dir="${target.dir}"/>
        <!-- copio l'ear prodotto da maven -->
        <copy todir="${target.dir}" >
            <fileset  dir="${ear.path}">
                <filename  name="saceriam-*.ear" />
            </fileset>
        </copy>
    </target>

    <target name="unear_artifact" depends="copy_ear,ear-filename">
        <!-- Unzip dell'ear -->
        <unzip src="${ear.filename}" dest="${target.dir}"  />
    </target>

    <target name="unzip_deps_artifact" depends="unear_artifact,deps-filename">
        <!-- Unzip del war -->
        <unzip src="${war.filename}" dest="${target.dir}/war"/>
        <!-- Unzip del jar jpa -->
        <unzip src="${jpa.filename}" dest="${target.dir}/lib/jpa"/>
    </target>

    <target name="filter-resources" depends="init-params">
        <filter filtersfile="${filters.path}/${env-dist}/deploy_env.properties"/>
        <!-- EAR application.xml filtering -->
        <copy file="${target.dir}/META-INF/application.xml" filtering="true" tofile="${target.dir}/META-INF/application.xml_${env-dist}" />
        <!-- EAR MANIFEST.MF filtering -->
        <copy file="${target.dir}/META-INF/MANIFEST.MF" filtering="true" tofile="${target.dir}/META-INF/MANIFEST.MF_${env-dist}" />
        <!-- WAR MANIFEST.MF filtering -->
        <copy file="${target.dir}/war/META-INF/MANIFEST.MF" filtering="true" tofile="${target.dir}/war/META-INF/MANIFEST.MF_${env-dist}" />
        <!-- WAR web.xml filtering -->
        <copy file="${config.path}/web.xml" filtering="true" tofile="${target.dir}/war/WEB-INF/web.xml_${env-dist}" />
        <!-- WAR custom logo - main logo copy -->
        <copy file="${filters.path}/${env-dist}/logo_sacer_small.png" tofile="${target.dir}/war/img/logo_sacer_small.png_${env-dist}" />
        <!-- WAR custom logo - logo1 copy -->
        <copy file="${filters.path}/${env-dist}/LogoParer.png" tofile="${target.dir}/war/img/regione/LogoParer.png_${env-dist}" />
        <!-- WAR custom logo - logo2 copy -->
        <copy file="${filters.path}/${env-dist}/LogoER.png" tofile="${target.dir}/war/img/regione/LogoER.png_${env-dist}" />
        <!-- WAR custom logo - logo3 copy -->
        <copy file="${filters.path}/${env-dist}/LogoIbc.png" tofile="${target.dir}/war/img/regione/LogoIbc.png_${env-dist}" />
        <!-- WAR custom favicon - favicon copy -->
        <copy file="${filters.path}/${env-dist}/favicon.ico" tofile="${target.dir}/war/img/regione/favicon.ico_${env-dist}" />
        <!-- WAR custom CSS copy -->
        <copy file="${filters.path}/${env-dist}/slForms-over.css" tofile="${target.dir}/war/css/slForms-over.css_${env-dist}" />
        <!-- JPA persistence.xml filtering -->
        <copy file="${config.path}/persistence.xml" filtering="true" tofile="${target.dir}/lib/jpa/META-INF/persistence.xml_${env-dist}" />
    </target>

    <target name="package" depends="init-params,ear-filename,deps-filename" >

        <!-- JPA JAR UPDATING-->
        <copy file="${target.dir}/lib/jpa/META-INF/persistence.xml_${env-dist}" overwrite="true" tofile="${target.dir}/lib/jpa/META-INF/persistence.xml" />
        <jar update="true" destfile="${jpa.filename}"
             basedir="${target.dir}/lib/jpa" includes="META-INF/persistence.xml" />
        <!-- WAR UPDATING -->
        <!-- WAR web.xml overwrite -->
        <copy file="${target.dir}/war/WEB-INF/web.xml_${env-dist}" overwrite="true" tofile="${target.dir}/war/WEB-INF/web.xml" />

        <!-- custom logo - main logo overwrite -->
        <copy file="${target.dir}/war/img/logo_sacer_small.png_${env-dist}" overwrite="true" tofile="${target.dir}/war/img/logo_sacer_small.png" />
        <!-- custom logo - logo 1 overwrite -->
        <copy file="${target.dir}/war/img/regione/LogoParer.png_${env-dist}" overwrite="true" tofile="${target.dir}/war/img/regione/LogoParer.png" />
        <!-- custom logo - logo 2 overwrite -->
        <copy file="${target.dir}/war/img/regione/LogoER.png_${env-dist}" overwrite="true" tofile="${target.dir}/war/img/regione/LogoER.png" />
        <!-- custom logo - logo 3 overwrite -->
        <copy file="${target.dir}/war/img/regione/LogoIbc.png_${env-dist}" overwrite="true" tofile="${target.dir}/war/img/regione/LogoIbc.png" />
        <!-- custom favicon - favicon overwrite -->
        <copy file="${target.dir}/war/img/regione/favicon.ico_${env-dist}" overwrite="true" tofile="${target.dir}/war/img/regione/favicon.ico" />

        <!-- WAR CSS overwrite -->
        <copy file="${target.dir}/war/css/slForms-over.css_${env-dist}" overwrite="true" tofile="${target.dir}/war/css/slForms-over.css" />

        <!-- WAR MANIFEST.MF filtering -->
        <copy file="${target.dir}/war/META-INF/MANIFEST.MF_${env-dist}" overwrite="true" tofile="${target.dir}/war/META-INF/MANIFEST.MF" />
        <war update="true" destfile="${war.filename}"  manifest="${target.dir}/war/META-INF/MANIFEST.MF"
             basedir="${target.dir}/war/"
             includes="WEB-INF/web.xml
         img/logo_sacer_small.png
         img/regione/LogoParer.png
         img/regione/LogoER.png
         img/regione/LogoIbc.png
         img/regione/favicon.ico
         css/slForms-over.css" />

        <!-- EAR UPDATING -->
        <!-- EAR application.xml filtering -->
        <copy file="${target.dir}/META-INF/application.xml_${env-dist}" overwrite="true" tofile="${target.dir}/META-INF/application.xml" />
        <!-- EAR application.xml filtering -->
        <copy file="${target.dir}/META-INF/MANIFEST.MF_${env-dist}" overwrite="true" tofile="${target.dir}/META-INF/MANIFEST.MF"  />
        <basename property="war.basename" file="${war.filename}" />
        <basename property="jpa.basename" file="${jpa.filename}" />
        <ear update="true" destfile="${ear.filename}" basedir="${target.dir}" appxml="${target.dir}/META-INF/application.xml"
             manifest="${target.dir}/META-INF/MANIFEST.MF"
             includes="${war.basename} lib/${jpa.basename}" />
        <basename property="new-ear" file="${ear.filename}" suffix=".ear" />
        <copy file="${ear.filename}" tofile="${ears.dir}/${new-ear}-${env-dist}.ear" />
    </target>


    <target name="snap-dist" description="Crea il pacchetto per CI-JENKINS (Jboss)">
        <!--
        - unear_artifact deve essere invocato una sola volta, in modo da effettuare una sola decompressione e
        ottimizzare le performance
        - filter resources e package non devono essere eseguiti in cascata sullo stesso ambiente altrimenti mi perdo il file con i
        placeholder
        - filter-resources deve essere invocato in modo seriale su tutti gli ambienti da distribuire in modo da avere
        una copia del file filtrato per ogni ambiente
        - package deve essere invocato in modo seriale su tutti gli ambienti da distribuire in modo da avere
        una copia dell'ear per ogni ambiente   -->
        <antcall target="unzip_deps_artifact" />
        <property name="env-dist" value="snap" />
        <antcall target="filter-resources" >
            <param name="env-dist" value="${env-dist}"/>
        </antcall>
        <antcall target="package"  >
            <param name="env-dist" value="${env-dist}"/>
        </antcall>
        <antcall target="clean" />
    </target>
    

    <target name="dist-all-env" description="Crea i pacchetti per TEST E PRODUZIONE">
        <!--
        - unear_artifact deve essere invocato una sola volta, in modo da effettuare una sola decompressione e
        ottimizzare le performance
        - filter resources e package non devono essere eseguiti in cascata sullo stesso ambiente altrimenti mi perdo il file con i
        placeholder
        - filter-resources deve essere invocato in modo seriale su tutti gli ambienti da distribuire in modo da avere
        una copia del file filtrato per ogni ambiente
        - package deve essere invocato in modo seriale su tutti gli ambienti da distribuire in modo da avere
        una copia dell'ear per ogni ambiente   -->
        <antcall target="unzip_deps_artifact" />

        <!-- SACERIAM RERTEST filtering-->
        <antcall target="filter-resources" >
            <param name="env-dist" value="rertest"/>
        </antcall>
        <!-- SACERIAM RERPRE filtering-->
        <antcall target="filter-resources" >
            <param name="env-dist" value="rerpre"/>
        </antcall>
        <!-- SACERIAM RERPROD filtering-->
        <antcall target="filter-resources" >
            <param name="env-dist" value="rerprod"/>
        </antcall>
        <!-- SACERIAM PUGLIA filtering-->
        <antcall target="filter-resources" >
            <param name="env-dist" value="pugliatest"/>
        </antcall>
        <antcall target="filter-resources" >
            <param name="env-dist" value="pugliaprod"/>
        </antcall>
    
        <!-- PACKAGING -->
        <!-- SACERIAM RERTEST PACKAGING-->
        <antcall target="package"  >
            <param name="env-dist" value="rertest"/>
        </antcall>
        <sleep milliseconds="3000"/>

        <!-- SACERIAM RERPRE PACKAGING-->
        <antcall target="package"  >
            <param name="env-dist" value="rerpre"/>
        </antcall>
        <sleep milliseconds="3000"/>

        <!-- SACERIAM RERPROD PACKAGING-->
        <antcall target="package"  >
            <param name="env-dist" value="rerprod"/>
        </antcall>
        <sleep milliseconds="3000"/>
        <!-- SACERIAM PUGLIA PACKAGING-->
        <antcall target="package"  >
            <param name="env-dist" value="pugliatest"/>
        </antcall>
        <sleep milliseconds="3000"/>
        <antcall target="package"  >
            <param name="env-dist" value="pugliaprod"/>
        </antcall>

        <antcall target="clean" />
    </target>

    <target name="puglia" description="Crea i pacchetti per la Regione Puglia">
        <!--
        - unear_artifact deve essere invocato una sola volta, in modo da effettuare una sola decompressione e
        ottimizzare le performance
        - filter resources e package non devono essere eseguiti in cascata sullo stesso ambiente altrimenti mi perdo il file con i
        placeholder
        - filter-resources deve essere invocato in modo seriale su tutti gli ambienti da distribuire in modo da avere
        una copia del file filtrato per ogni ambiente
        - package deve essere invocato in modo seriale su tutti gli ambienti da distribuire in modo da avere
        una copia dell'ear per ogni ambiente   -->
        <antcall target="unzip_deps_artifact" />

        <antcall target="filter-resources" >
            <param name="env-dist" value="pugliatest"/>
        </antcall>
        <antcall target="filter-resources" >
            <param name="env-dist" value="pugliaprod"/>
        </antcall>

        <antcall target="package"  >
            <param name="env-dist" value="pugliatest"/>
        </antcall>
        <sleep milliseconds="3000"/>
        <antcall target="package"  >
            <param name="env-dist" value="pugliaprod"/>
        </antcall>

        <antcall target="clean" />
    </target>

</project>
