/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.saceriam.slite.gen.tablebean;

import java.math.BigDecimal;
import java.sql.Timestamp;

import it.eng.saceriam.entity.AplApplic;
import it.eng.saceriam.entity.LogUserDaReplic;
import it.eng.spagoLite.db.base.BaseRowInterface;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Log_User_Da_Replic
 *
 */
public class LogUserDaReplicRowBean extends BaseRow
	implements BaseRowInterface, JEEBaseRowInterface {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Monday, 27 February 2017 16:32" )
     */

    public static LogUserDaReplicTableDescriptor TABLE_DESCRIPTOR = new LogUserDaReplicTableDescriptor();

    public LogUserDaReplicRowBean() {
	super();
    }

    public TableDescriptor getTableDescriptor() {
	return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdLogUserDaReplic() {
	return getBigDecimal("id_log_user_da_replic");
    }

    public void setIdLogUserDaReplic(BigDecimal idLogUserDaReplic) {
	setObject("id_log_user_da_replic", idLogUserDaReplic);
    }

    public BigDecimal getIdApplic() {
	return getBigDecimal("id_applic");
    }

    public void setIdApplic(BigDecimal idApplic) {
	setObject("id_applic", idApplic);
    }

    public BigDecimal getIdUserIam() {
	return getBigDecimal("id_user_iam");
    }

    public void setIdUserIam(BigDecimal idUserIam) {
	setObject("id_user_iam", idUserIam);
    }

    public String getNmUserid() {
	return getString("nm_userid");
    }

    public void setNmUserid(String nmUserid) {
	setObject("nm_userid", nmUserid);
    }

    public String getTiOperReplic() {
	return getString("ti_oper_replic");
    }

    public void setTiOperReplic(String tiOperReplic) {
	setObject("ti_oper_replic", tiOperReplic);
    }

    public String getTiStatoReplic() {
	return getString("ti_stato_replic");
    }

    public void setTiStatoReplic(String tiStatoReplic) {
	setObject("ti_stato_replic", tiStatoReplic);
    }

    public Timestamp getDtLogUserDaReplic() {
	return getTimestamp("dt_log_user_da_replic");
    }

    public void setDtLogUserDaReplic(Timestamp dtLogUserDaReplic) {
	setObject("dt_log_user_da_replic", dtLogUserDaReplic);
    }

    public String getCdErr() {
	return getString("cd_err");
    }

    public void setCdErr(String cdErr) {
	setObject("cd_err", cdErr);
    }

    public String getDsMsgErr() {
	return getString("ds_msg_err");
    }

    public void setDsMsgErr(String dsMsgErr) {
	setObject("ds_msg_err", dsMsgErr);
    }

    public Timestamp getDtErr() {
	return getTimestamp("dt_err");
    }

    public void setDtErr(Timestamp dtErr) {
	setObject("dt_err", dtErr);
    }

    public Timestamp getDtChiusuraReplica() {
	return getTimestamp("dt_chiusura_replica");
    }

    public void setDtChiusuraReplica(Timestamp dtChiusuraReplica) {
	setObject("dt_chiusura_replica", dtChiusuraReplica);
    }

    @Override
    public void entityToRowBean(Object obj) {
	LogUserDaReplic entity = (LogUserDaReplic) obj;
	this.setIdLogUserDaReplic(new BigDecimal(entity.getIdLogUserDaReplic()));
	if (entity.getAplApplic() != null) {
	    this.setIdApplic(new BigDecimal(entity.getAplApplic().getIdApplic()));
	}
	this.setIdUserIam(entity.getIdUserIam());
	this.setNmUserid(entity.getNmUserid());
	this.setTiOperReplic(entity.getTiOperReplic());
	this.setTiStatoReplic(entity.getTiStatoReplic());
	if (entity.getDtLogUserDaReplic() != null) {
	    this.setDtLogUserDaReplic(new Timestamp(entity.getDtLogUserDaReplic().getTime()));
	}
	this.setCdErr(entity.getCdErr());
	this.setDsMsgErr(entity.getDsMsgErr());
	if (entity.getDtErr() != null) {
	    this.setDtErr(new Timestamp(entity.getDtErr().getTime()));
	}
	if (entity.getDtChiusuraReplica() != null) {
	    this.setDtChiusuraReplica(new Timestamp(entity.getDtChiusuraReplica().getTime()));
	}
    }

    @Override
    public LogUserDaReplic rowBeanToEntity() {
	LogUserDaReplic entity = new LogUserDaReplic();
	if (this.getIdLogUserDaReplic() != null) {
	    entity.setIdLogUserDaReplic(this.getIdLogUserDaReplic().longValue());
	}
	if (this.getIdApplic() != null) {
	    if (entity.getAplApplic() == null) {
		entity.setAplApplic(new AplApplic());
	    }
	    entity.getAplApplic().setIdApplic(this.getIdApplic().longValue());
	}
	entity.setIdUserIam(this.getIdUserIam());
	entity.setNmUserid(this.getNmUserid());
	entity.setTiOperReplic(this.getTiOperReplic());
	entity.setTiStatoReplic(this.getTiStatoReplic());
	entity.setDtLogUserDaReplic(this.getDtLogUserDaReplic());
	entity.setCdErr(this.getCdErr());
	entity.setDsMsgErr(this.getDsMsgErr());
	entity.setDtErr(this.getDtErr());
	entity.setDtChiusuraReplica(this.getDtChiusuraReplica());
	return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
	setObject("rownum", rownum);
    }

    public Integer getRownum() {
	return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
	setObject("rnum", rnum);
    }

    public Integer getRnum() {
	return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
	setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
	return Integer.parseInt(getObject("numrecords").toString());
    }

}
