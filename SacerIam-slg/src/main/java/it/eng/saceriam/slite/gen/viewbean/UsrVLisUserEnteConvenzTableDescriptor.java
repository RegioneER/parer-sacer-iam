/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.saceriam.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Usr_V_Lis_User_Ente_Convenz
 *
 */
public class UsrVLisUserEnteConvenzTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter",
     * comments = "This class was generated by OraTool", date = "Friday, 20 October 2017 16:58" )
     */

    public static final String SELECT = "Select * from Usr_V_Lis_User_Ente_Convenz /**/";
    public static final String TABLE_NAME = "Usr_V_Lis_User_Ente_Convenz";
    public static final String COL_ID_ENTE_CONVENZ = "id_ente_convenz";
    public static final String COL_ID_APPLIC = "id_applic";
    public static final String COL_ID_USER_IAM = "id_user_iam";
    public static final String COL_NM_COGNOME_USER = "nm_cognome_user";
    public static final String COL_NM_NOME_USER = "nm_nome_user";
    public static final String COL_FL_ATTIVO = "fl_attivo";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_NM_APPLIC = "nm_applic";
    public static final String COL_NM_RUOLO_DEFAULT = "nm_ruolo_default";
    public static final String COL_DL_COMPOSITO_ORGANIZ = "dl_composito_organiz";
    public static final String COL_FL_USER_ADMIN = "fl_user_admin";
    public static final String COL_TIPO_USER = "tipo_user";
    public static final String COL_ID_SISTEMA_VERSANTE = "id_sistema_versante";
    public static final String COL_TI_STATO_USER = "ti_stato_user";
    public static final String COL_ID_RICH_GEST_USER = "id_rich_gest_user";
    public static final String COL_DT_RICH_GEST_USER = "dt_rich_gest_user";
    public static final String COL_KEY_RICH_GEST_USER = "key_rich_gest_user";
    public static final String COL_FL_AZIONI_EVASE = "fl_azioni_evase";
    public static final String COL_DS_LISTA_AZIONI = "ds_lista_azioni";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_ENTE_CONVENZ,
		new ColumnDescriptor(COL_ID_ENTE_CONVENZ, Types.DECIMAL, 22, true));
	map.put(COL_ID_APPLIC, new ColumnDescriptor(COL_ID_APPLIC, Types.DECIMAL, 22, true));
	map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, true));
	map.put(COL_NM_COGNOME_USER,
		new ColumnDescriptor(COL_NM_COGNOME_USER, Types.VARCHAR, 100, true));
	map.put(COL_NM_NOME_USER, new ColumnDescriptor(COL_NM_NOME_USER, Types.VARCHAR, 100, true));
	map.put(COL_FL_ATTIVO, new ColumnDescriptor(COL_FL_ATTIVO, Types.VARCHAR, 1, true));
	map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, true));
	map.put(COL_NM_APPLIC, new ColumnDescriptor(COL_NM_APPLIC, Types.VARCHAR, 100, true));
	map.put(COL_NM_RUOLO_DEFAULT,
		new ColumnDescriptor(COL_NM_RUOLO_DEFAULT, Types.VARCHAR, 100, true));
	map.put(COL_DL_COMPOSITO_ORGANIZ,
		new ColumnDescriptor(COL_DL_COMPOSITO_ORGANIZ, Types.VARCHAR, 4000, true));
	map.put(COL_FL_USER_ADMIN, new ColumnDescriptor(COL_FL_USER_ADMIN, Types.VARCHAR, 1, true));
	map.put(COL_TIPO_USER, new ColumnDescriptor(COL_TIPO_USER, Types.VARCHAR, 20, true));
	map.put(COL_ID_SISTEMA_VERSANTE,
		new ColumnDescriptor(COL_ID_SISTEMA_VERSANTE, Types.DECIMAL, 22, true));
	map.put(COL_TI_STATO_USER,
		new ColumnDescriptor(COL_TI_STATO_USER, Types.VARCHAR, 30, true));
	map.put(COL_ID_RICH_GEST_USER,
		new ColumnDescriptor(COL_ID_RICH_GEST_USER, Types.DECIMAL, 22, true));
	map.put(COL_DT_RICH_GEST_USER,
		new ColumnDescriptor(COL_DT_RICH_GEST_USER, Types.TIMESTAMP, 7, true));
	map.put(COL_KEY_RICH_GEST_USER,
		new ColumnDescriptor(COL_KEY_RICH_GEST_USER, Types.VARCHAR, 4000, true));
	map.put(COL_FL_AZIONI_EVASE,
		new ColumnDescriptor(COL_FL_AZIONI_EVASE, Types.VARCHAR, 1, true));
	map.put(COL_DS_LISTA_AZIONI,
		new ColumnDescriptor(COL_DS_LISTA_AZIONI, Types.VARCHAR, 4000, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
