/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.saceriam.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Usr_V_All_Autor
 *
 */
public class UsrVAllAutorTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 28 November 2013 16:07" )
     */

    public static final String SELECT = "Select * from Usr_V_All_Autor /**/";
    public static final String TABLE_NAME = "Usr_V_All_Autor";
    public static final String COL_ID_USER_IAM = "id_user_iam";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_ID_USO_USER_APPLIC = "id_uso_user_applic";
    public static final String COL_ID_APPLIC = "id_applic";
    public static final String COL_NM_APPLIC = "nm_applic";
    public static final String COL_ID_ORGANIZ_IAM = "id_organiz_iam";
    public static final String COL_NM_TIPO_ORGANIZ_APPLIC = "nm_tipo_organiz_applic";
    public static final String COL_ID_ORGANIZ_APPLIC = "id_organiz_applic";
    public static final String COL_NM_ORGANIZ_APPLIC = "nm_organiz_applic";
    public static final String COL_TI_USO_RUO = "ti_uso_ruo";
    public static final String COL_ID_USO_RUOLO = "id_uso_ruolo";
    public static final String COL_ID_RUOLO = "id_ruolo";
    public static final String COL_NM_RUOLO = "nm_ruolo";
    public static final String COL_TI_DICH_AUTOR = "ti_dich_autor";
    public static final String COL_ID_AUTOR = "id_autor";
    public static final String COL_NM_PAGINA_WEB = "nm_pagina_web";
    public static final String COL_NM_AUTOR = "nm_autor";
    public static final String COL_DS_AUTOR = "ds_autor";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, true));
        map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, true));
        map.put(COL_ID_USO_USER_APPLIC, new ColumnDescriptor(COL_ID_USO_USER_APPLIC, Types.DECIMAL, 22, true));
        map.put(COL_ID_APPLIC, new ColumnDescriptor(COL_ID_APPLIC, Types.DECIMAL, 22, true));
        map.put(COL_NM_APPLIC, new ColumnDescriptor(COL_NM_APPLIC, Types.VARCHAR, 100, true));
        map.put(COL_ID_ORGANIZ_IAM, new ColumnDescriptor(COL_ID_ORGANIZ_IAM, Types.DECIMAL, 22, true));
        map.put(COL_NM_TIPO_ORGANIZ_APPLIC, new ColumnDescriptor(COL_NM_TIPO_ORGANIZ_APPLIC, Types.VARCHAR, 100, true));
        map.put(COL_ID_ORGANIZ_APPLIC, new ColumnDescriptor(COL_ID_ORGANIZ_APPLIC, Types.DECIMAL, 22, true));
        map.put(COL_NM_ORGANIZ_APPLIC, new ColumnDescriptor(COL_NM_ORGANIZ_APPLIC, Types.VARCHAR, 4000, true));
        map.put(COL_TI_USO_RUO, new ColumnDescriptor(COL_TI_USO_RUO, Types.VARCHAR, 4, true));
        map.put(COL_ID_USO_RUOLO, new ColumnDescriptor(COL_ID_USO_RUOLO, Types.DECIMAL, 22, true));
        map.put(COL_ID_RUOLO, new ColumnDescriptor(COL_ID_RUOLO, Types.DECIMAL, 22, true));
        map.put(COL_NM_RUOLO, new ColumnDescriptor(COL_NM_RUOLO, Types.VARCHAR, 100, true));
        map.put(COL_TI_DICH_AUTOR, new ColumnDescriptor(COL_TI_DICH_AUTOR, Types.VARCHAR, 20, true));
        map.put(COL_ID_AUTOR, new ColumnDescriptor(COL_ID_AUTOR, Types.DECIMAL, 22, true));
        map.put(COL_NM_PAGINA_WEB, new ColumnDescriptor(COL_NM_PAGINA_WEB, Types.VARCHAR, 100, true));
        map.put(COL_NM_AUTOR, new ColumnDescriptor(COL_NM_AUTOR, Types.VARCHAR, 100, true));
        map.put(COL_DS_AUTOR, new ColumnDescriptor(COL_DS_AUTOR, Types.VARCHAR, 513, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
