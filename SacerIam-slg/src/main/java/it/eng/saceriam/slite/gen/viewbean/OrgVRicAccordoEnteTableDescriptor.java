/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.saceriam.slite.gen.viewbean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Org_V_Ric_Accordo_Ente
 *
 */
public class OrgVRicAccordoEnteTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$ViewBeanWriter", comments =
     * "This class was generated by OraTool", date = "Thursday, 16 December 2021 12:32" )
     */

    public static final String SELECT = "Select * from Org_V_Ric_Accordo_Ente /**/";
    public static final String TABLE_NAME = "Org_V_Ric_Accordo_Ente";
    public static final String COL_ID_ENTE_CONVENZ = "id_ente_convenz";
    public static final String COL_NM_ENTE_CONVENZ = "nm_ente_convenz";
    public static final String COL_ID_AMBIENTE_ENTE_CONVENZ = "id_ambiente_ente_convenz";
    public static final String COL_NM_AMBIENTE_ENTE_CONVENZ = "nm_ambiente_ente_convenz";
    public static final String COL_ID_USER_IAM_COR = "id_user_iam_cor";
    public static final String COL_ID_TIPO_ACCORDO = "id_tipo_accordo";
    public static final String COL_CD_TIPO_ACCORDO = "cd_tipo_accordo";
    public static final String COL_ID_TIPO_GESTIONE_ACCORDO = "id_tipo_gestione_accordo";
    public static final String COL_CD_TIPO_GESTIONE_ACCORDO = "cd_tipo_gestione_accordo";
    public static final String COL_ID_ACCORDO_ENTE = "id_accordo_ente";
    public static final String COL_CD_REGISTRO_REPERTORIO = "cd_registro_repertorio";
    public static final String COL_AA_REPERTORIO = "aa_repertorio";
    public static final String COL_CD_KEY_REPERTORIO = "cd_key_repertorio";
    public static final String COL_FL_RECESSO = "fl_recesso";
    public static final String COL_DT_DEC_ACCORDO_INFO = "dt_dec_accordo_info";
    public static final String COL_DT_SCAD_ACCORDO = "dt_scad_accordo";
    public static final String COL_DT_DEC_ACCORDO = "dt_dec_accordo";
    public static final String COL_DT_FINE_VALID_ACCORDO = "dt_fine_valid_accordo";
    public static final String COL_DS_NOTA_FATTURAZIONE = "ds_nota_fatturazione";
    public static final String COL_FL_ESISTONO_GEST_ACC = "fl_esistono_gest_acc";
    public static final String COL_FL_ESISTE_NOTA_FATTURAZIONE = "fl_esiste_nota_fatturazione";
    public static final String COL_FL_FASCIA_MANUALE = "fl_fascia_manuale";
    public static final String COL_FL_ESISTONO_SAE = "fl_esistono_sae";
    public static final String COL_FL_ESISTONO_SUE = "fl_esistono_sue";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_ENTE_CONVENZ, new ColumnDescriptor(COL_ID_ENTE_CONVENZ, Types.DECIMAL, 22, true));
        map.put(COL_NM_ENTE_CONVENZ, new ColumnDescriptor(COL_NM_ENTE_CONVENZ, Types.VARCHAR, 254, true));
        map.put(COL_ID_AMBIENTE_ENTE_CONVENZ,
                new ColumnDescriptor(COL_ID_AMBIENTE_ENTE_CONVENZ, Types.DECIMAL, 22, true));
        map.put(COL_NM_AMBIENTE_ENTE_CONVENZ,
                new ColumnDescriptor(COL_NM_AMBIENTE_ENTE_CONVENZ, Types.VARCHAR, 100, true));
        map.put(COL_ID_USER_IAM_COR, new ColumnDescriptor(COL_ID_USER_IAM_COR, Types.DECIMAL, 22, true));
        map.put(COL_ID_TIPO_ACCORDO, new ColumnDescriptor(COL_ID_TIPO_ACCORDO, Types.DECIMAL, 22, true));
        map.put(COL_CD_TIPO_ACCORDO, new ColumnDescriptor(COL_CD_TIPO_ACCORDO, Types.VARCHAR, 100, true));
        map.put(COL_ID_TIPO_GESTIONE_ACCORDO,
                new ColumnDescriptor(COL_ID_TIPO_GESTIONE_ACCORDO, Types.VARCHAR, 256, true));
        map.put(COL_CD_TIPO_GESTIONE_ACCORDO,
                new ColumnDescriptor(COL_CD_TIPO_GESTIONE_ACCORDO, Types.VARCHAR, 256, true));
        map.put(COL_ID_ACCORDO_ENTE, new ColumnDescriptor(COL_ID_ACCORDO_ENTE, Types.DECIMAL, 22, true));
        map.put(COL_CD_REGISTRO_REPERTORIO, new ColumnDescriptor(COL_CD_REGISTRO_REPERTORIO, Types.VARCHAR, 100, true));
        map.put(COL_AA_REPERTORIO, new ColumnDescriptor(COL_AA_REPERTORIO, Types.DECIMAL, 22, true));
        map.put(COL_CD_KEY_REPERTORIO, new ColumnDescriptor(COL_CD_KEY_REPERTORIO, Types.VARCHAR, 100, true));
        map.put(COL_FL_RECESSO, new ColumnDescriptor(COL_FL_RECESSO, Types.VARCHAR, 1, true));
        map.put(COL_DT_DEC_ACCORDO_INFO, new ColumnDescriptor(COL_DT_DEC_ACCORDO_INFO, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_SCAD_ACCORDO, new ColumnDescriptor(COL_DT_SCAD_ACCORDO, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_DEC_ACCORDO, new ColumnDescriptor(COL_DT_DEC_ACCORDO, Types.TIMESTAMP, 7, true));
        map.put(COL_DT_FINE_VALID_ACCORDO, new ColumnDescriptor(COL_DT_FINE_VALID_ACCORDO, Types.TIMESTAMP, 7, true));
        map.put(COL_DS_NOTA_FATTURAZIONE, new ColumnDescriptor(COL_DS_NOTA_FATTURAZIONE, Types.VARCHAR, 4000, true));
        map.put(COL_FL_ESISTONO_GEST_ACC, new ColumnDescriptor(COL_FL_ESISTONO_GEST_ACC, Types.VARCHAR, 1, true));
        map.put(COL_FL_ESISTE_NOTA_FATTURAZIONE,
                new ColumnDescriptor(COL_FL_ESISTE_NOTA_FATTURAZIONE, Types.VARCHAR, 1, true));
        map.put(COL_FL_FASCIA_MANUALE, new ColumnDescriptor(COL_FL_FASCIA_MANUALE, Types.VARCHAR, 1, true));
        map.put(COL_FL_ESISTONO_SAE, new ColumnDescriptor(COL_FL_ESISTONO_SAE, Types.VARCHAR, 1, true));
        map.put(COL_FL_ESISTONO_SUE, new ColumnDescriptor(COL_FL_ESISTONO_SUE, Types.VARCHAR, 1, true));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
