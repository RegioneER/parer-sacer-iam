/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.saceriam.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Usr_User
 *
 */
public class UsrUserTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Thursday, 14 September 2017 15:03"
     * )
     */

    public static final String SELECT = "Select * from Usr_User /**/";
    public static final String TABLE_NAME = "Usr_User";
    public static final String COL_ID_USER_IAM = "id_user_iam";
    public static final String COL_NM_USERID = "nm_userid";
    public static final String COL_CD_PSW = "cd_psw";
    public static final String COL_NM_COGNOME_USER = "nm_cognome_user";
    public static final String COL_NM_NOME_USER = "nm_nome_user";
    public static final String COL_FL_ATTIVO = "fl_attivo";
    public static final String COL_DT_REG_PSW = "dt_reg_psw";
    public static final String COL_DT_SCAD_PSW = "dt_scad_psw";
    public static final String COL_CD_SALT = "cd_salt";
    public static final String COL_FL_USER_ADMIN = "fl_user_admin";
    public static final String COL_CD_FISC = "cd_fisc";
    public static final String COL_DS_EMAIL = "ds_email";
    public static final String COL_DS_EMAIL_SECONDARIA = "ds_email_secondaria";
    public static final String COL_FL_CONTR_IP = "fl_contr_ip";
    public static final String COL_TIPO_USER = "tipo_user";
    public static final String COL_ID_AGENTE = "id_agente";
    public static final String COL_ID_SISTEMA_VERSANTE = "id_sistema_versante";
    public static final String COL_ID_ENTE_SIAM = "id_ente_siam";
    public static final String COL_ID_STATO_USER_COR = "id_stato_user_cor";
    public static final String COL_FL_RESP_ENTE_CONVENZ = "fl_resp_ente_convenz";
    public static final String COL_CD_PSW_DA_NOTIF = "cd_psw_da_notif";
    public static final String COL_FL_ABIL_ENTI_COLLEG_AUTOM = "fl_abil_enti_colleg_autom";
    public static final String COL_FL_ABIL_ORGANIZ_AUTOM = "fl_abil_organiz_autom";
    public static final String COL_TIPO_AUTH = "tipo_auth";
    public static final String COL_DL_CERT_CLIENT = "dl_Cert_client";
    public static final String COL_DT_INI_CERT = "dt_ini_cert";
    public static final String COL_DT_FIN_CERT = "dt_fin_cert";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, true));
	map.put(COL_NM_USERID, new ColumnDescriptor(COL_NM_USERID, Types.VARCHAR, 100, false));
	map.put(COL_CD_PSW, new ColumnDescriptor(COL_CD_PSW, Types.VARCHAR, 100, false));
	map.put(COL_NM_COGNOME_USER,
		new ColumnDescriptor(COL_NM_COGNOME_USER, Types.VARCHAR, 100, false));
	map.put(COL_NM_NOME_USER,
		new ColumnDescriptor(COL_NM_NOME_USER, Types.VARCHAR, 100, false));
	map.put(COL_FL_ATTIVO, new ColumnDescriptor(COL_FL_ATTIVO, Types.VARCHAR, 1, false));
	map.put(COL_DT_REG_PSW, new ColumnDescriptor(COL_DT_REG_PSW, Types.TIMESTAMP, 7, false));
	map.put(COL_DT_SCAD_PSW, new ColumnDescriptor(COL_DT_SCAD_PSW, Types.TIMESTAMP, 7, false));
	map.put(COL_CD_SALT, new ColumnDescriptor(COL_CD_SALT, Types.VARCHAR, 100, false));
	map.put(COL_FL_USER_ADMIN,
		new ColumnDescriptor(COL_FL_USER_ADMIN, Types.VARCHAR, 1, false));
	map.put(COL_CD_FISC, new ColumnDescriptor(COL_CD_FISC, Types.VARCHAR, 16, false));
	map.put(COL_DS_EMAIL, new ColumnDescriptor(COL_DS_EMAIL, Types.VARCHAR, 254, false));
	map.put(COL_DS_EMAIL_SECONDARIA,
		new ColumnDescriptor(COL_DS_EMAIL_SECONDARIA, Types.VARCHAR, 254, false));
	map.put(COL_FL_CONTR_IP, new ColumnDescriptor(COL_FL_CONTR_IP, Types.VARCHAR, 1, false));
	map.put(COL_TIPO_USER, new ColumnDescriptor(COL_TIPO_USER, Types.VARCHAR, 20, false));
	map.put(COL_ID_AGENTE, new ColumnDescriptor(COL_ID_AGENTE, Types.DECIMAL, 22, false));
	map.put(COL_ID_SISTEMA_VERSANTE,
		new ColumnDescriptor(COL_ID_SISTEMA_VERSANTE, Types.DECIMAL, 22, false));
	map.put(COL_ID_ENTE_SIAM, new ColumnDescriptor(COL_ID_ENTE_SIAM, Types.DECIMAL, 22, false));
	map.put(COL_ID_STATO_USER_COR,
		new ColumnDescriptor(COL_ID_STATO_USER_COR, Types.DECIMAL, 22, false));
	map.put(COL_FL_RESP_ENTE_CONVENZ,
		new ColumnDescriptor(COL_FL_RESP_ENTE_CONVENZ, Types.VARCHAR, 1, false));
	map.put(COL_CD_PSW_DA_NOTIF,
		new ColumnDescriptor(COL_CD_PSW_DA_NOTIF, Types.VARCHAR, 100, false));
	map.put(COL_FL_ABIL_ENTI_COLLEG_AUTOM,
		new ColumnDescriptor(COL_FL_ABIL_ENTI_COLLEG_AUTOM, Types.VARCHAR, 1, false));
	map.put(COL_FL_ABIL_ORGANIZ_AUTOM,
		new ColumnDescriptor(COL_FL_ABIL_ORGANIZ_AUTOM, Types.VARCHAR, 1, false));
	map.put(COL_TIPO_AUTH, new ColumnDescriptor(COL_TIPO_AUTH, Types.VARCHAR, 20, false));
	map.put(COL_DL_CERT_CLIENT,
		new ColumnDescriptor(COL_DL_CERT_CLIENT, Types.VARCHAR, 4000, false));
	map.put(COL_DT_INI_CERT, new ColumnDescriptor(COL_DT_INI_CERT, Types.TIMESTAMP, 7, false));
	map.put(COL_DT_FIN_CERT, new ColumnDescriptor(COL_DT_FIN_CERT, Types.TIMESTAMP, 7, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
