/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.saceriam.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Apl_Sistema_Versante
 *
 */
public class AplSistemaVersanteTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 23 October 2018 11:12" )
     */

    public static final String SELECT = "Select * from Apl_Sistema_Versante /**/";
    public static final String TABLE_NAME = "Apl_Sistema_Versante";
    public static final String COL_ID_SISTEMA_VERSANTE = "id_sistema_versante";
    public static final String COL_NM_SISTEMA_VERSANTE = "nm_sistema_versante";
    public static final String COL_CD_VERSIONE = "cd_versione";
    public static final String COL_DS_SISTEMA_VERSANTE = "ds_sistema_versante";
    public static final String COL_DS_NOTE = "ds_note";
    public static final String COL_NM_PRODUTTORE = "nm_produttore";
    public static final String COL_DS_VIA_SEDE_LEGALE = "ds_via_sede_legale";
    public static final String COL_CD_CAP_SEDE_LEGALE = "cd_cap_sede_legale";
    public static final String COL_DS_CITTA_SEDE_LEGALE = "ds_citta_sede_legale";
    public static final String COL_DS_EMAIL = "ds_email";
    public static final String COL_FL_PEC = "fl_pec";
    public static final String COL_FL_INTEGRAZIONE = "fl_integrazione";
    public static final String COL_FL_ASSOCIA_PERSONA_FISICA = "fl_associa_persona_fisica";
    public static final String COL_DT_INI_VAL = "dt_ini_val";
    public static final String COL_DT_FINE_VAL = "dt_fine_val";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_SISTEMA_VERSANTE, new ColumnDescriptor(COL_ID_SISTEMA_VERSANTE, Types.DECIMAL, 22, true));
        map.put(COL_NM_SISTEMA_VERSANTE, new ColumnDescriptor(COL_NM_SISTEMA_VERSANTE, Types.VARCHAR, 100, false));
        map.put(COL_CD_VERSIONE, new ColumnDescriptor(COL_CD_VERSIONE, Types.VARCHAR, 100, false));
        map.put(COL_DS_SISTEMA_VERSANTE, new ColumnDescriptor(COL_DS_SISTEMA_VERSANTE, Types.VARCHAR, 254, false));
        map.put(COL_NM_PRODUTTORE, new ColumnDescriptor(COL_NM_PRODUTTORE, Types.VARCHAR, 100, false));
        map.put(COL_DS_VIA_SEDE_LEGALE, new ColumnDescriptor(COL_DS_VIA_SEDE_LEGALE, Types.VARCHAR, 254, false));
        map.put(COL_CD_CAP_SEDE_LEGALE, new ColumnDescriptor(COL_CD_CAP_SEDE_LEGALE, Types.DECIMAL, 22, false));
        map.put(COL_DS_CITTA_SEDE_LEGALE, new ColumnDescriptor(COL_DS_CITTA_SEDE_LEGALE, Types.VARCHAR, 254, false));
        map.put(COL_DS_EMAIL, new ColumnDescriptor(COL_DS_EMAIL, Types.VARCHAR, 254, false));
        map.put(COL_DS_NOTE, new ColumnDescriptor(COL_DS_NOTE, Types.VARCHAR, 254, false));
        map.put(COL_FL_PEC, new ColumnDescriptor(COL_FL_PEC, Types.VARCHAR, 1, false));
        map.put(COL_FL_INTEGRAZIONE, new ColumnDescriptor(COL_FL_INTEGRAZIONE, Types.VARCHAR, 1, false));
        map.put(COL_FL_ASSOCIA_PERSONA_FISICA,
                new ColumnDescriptor(COL_FL_ASSOCIA_PERSONA_FISICA, Types.VARCHAR, 1, false));
        map.put(COL_DT_INI_VAL, new ColumnDescriptor(COL_DT_INI_VAL, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FINE_VAL, new ColumnDescriptor(COL_DT_FINE_VAL, Types.TIMESTAMP, 7, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
